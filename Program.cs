using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Net.Http.Headers;
using System.Numerics;
using System.Reflection.Emit;
using System.Reflection.PortableExecutable;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

var fullInput =
@"????.??.??. 1,1
????#???..?.?? 5,1,1
????????#????#?.# 1,2,3,2,1
?#???#?#?????.?# 11,2
?????.?#??.? 1,1,2
?.???#????????? 1,8,2
?###?.?????????? 5,2,1,1,1
??.???#????????? 2,1,1,7
??#???.????.?# 5,4,1
.?#?.??.????.#??? 2,1,3,3
??#???????##???#.##? 4,1,6,3
?.?#?????#???????? 10,4
.?.??.???.???? 2,3
?#?.?????.???#???? 1,3,3,3
??##????.??#??#. 2,3,1,1,2
?????.????.# 4,1,1
???.??##?????.????? 1,4,1,1,1,1
.??.??.?#?##?#? 1,1,6
???..????.#?#? 2,1,4
#???#?#?#?#?????#.?# 1,2,7,1,1,1
?????...?.???#???? 3,1,6
?????###?.#??#? 1,1,4,2,1
??#??.#??#?.#.#??##? 2,1,1,1,6
.?...#.??. 1,1,1
??..??????????. 1,9
????????#.?#???. 1,3,1,2,2
?#?.???.??????????# 3,1,3,4
?????##?.?#?? 2,2,2,1
???..#?#????? 1,3
.???#???##???##??#?# 10,2,3
??.?.?#??? 1,1,4
##??#??#????????#?.# 10,1,2,1,1
#???#????????#???? 1,1,10
.#?..?????. 2,2,1
?#?#.??#?????? 3,2,3
?????#??#?.#??? 1,7,4
#??.???.?#?????..? 1,7
##?#.?#.?? 2,1,1
.??..??.?????#?? 2,1,8
??##??.??##???#??... 2,8
?#???#.?.????#??? 3,1,1,4,1
???#.?????.??? 1,1,2,2
.??????????? 5,1
????.?#?#????.???. 3,6,3
????????##???? 1,1,7,1
???.??.???? 1,2,2
??#?#..??#?#??.? 4,5,1
.???#?.?????????? 4,7
????????#???#???### 3,1,8
????###?#?? 3,1,1
?.?..#?????##??##?#. 1,2,11
???.????????###???# 1,1,1,12
?.#?#???#...###? 7,3
???.?#??#? 1,5
??#????#.?.#? 5,1,1
..###.??#? 3,1
??.#?????????? 1,2,4
?.???????????.#.?? 7,1,1,1
#??##??.?? 5,1
??#?#????#??? 4,2,1,1
?#??##???#.???#.#? 6,3,3,2
??.?.???#? 1,1,1
?.??.???????. 2,2,1,1
??#????#.# 4,1,1
??.??????#.???#????. 1,1,3,2,2,1
#???.??.###? 1,2,1,4
.?????#?#?? 4,3
.?#?????#.?##??? 2,4,3,1
#???#???#????#. 2,7,1
##??#???#?????.??#?# 9,1,2,1
#?#?.?#.????#???? 1,1,1,2,4
??????#?.?????#?#? 2,1,2,2,5
??#..????#.?? 1,1,1,2
??..#?????#?#??.# 2,1,6,1,1
#?????????# 3,1,3
###??????#???.????? 5,1,4,1,1
?##.??#??.? 2,5,1
.#??#???????.??# 2,4,2,3
.#??????#?????. 2,6,2
??.?###.?#?????.?? 1,4,2,3,1
?????##???? 1,2,1
????????#??##? 1,2,2,2
????????.??? 1,1,3
?????.?????#????##?? 1,1,2,8
.?????.????# 2,4
??##??#?..#..?#?. 6,1,3
???.???.#?#?..#?.# 1,3,1,1,1,1
.?.#####.?.??? 5,1
??##??#.????#?.# 1,3,1,4,1
?#?##???.??. 7,1
.????#?#??????.? 1,7,2,1
.#??#?????? 4,1
?#???????.?##?? 4,1,5
?#???????#?.??##???? 11,4
??#..#...??##? 1,1,1,3
?.?????.?#?.??#?#.? 1,1,1,2,5,1
?????#??????? 6,1,1,1
.??#??????.?##?##?#. 4,8
????.?#??????#??#. 1,1,1,5,2
?#..?.##?? 1,3
?##??????#???.#. 10,2,1
?.#?.???#??.? 2,4
??.??.???? 1,1,3
#?#??#?###?.?.? 1,1,6,1
??#?????#?.?. 3,1,2,1
??????#?.???#.? 7,1,1,1
.????.???? 2,1
..#???.####????#??? 1,5,3,1
?????#..???? 3,1,1,1
.##?#??##? 2,2,2
???????##?#????.?? 11,1
?????#??#.?????? 1,6,1,1
???.#.??#. 1,1,2
#?#??#???####?.?? 13,1
???????..#??#??.?. 1,1,2,5,1
..?#???.??. 3,1,1
??#?#???.? 2,1,2
#?.???.??? 1,3,2
?##...????.?#?. 2,4,2
?.??????????? 1,1,6
#??#????????. 4,3
?.?##?.?#?#?.?.??.?? 1,3,4,1,1,1
??#?????????? 1,1,3,4
??.??.?.##. 1,2
#?.???...??? 2,2,1,1
????#?#???#?##??##?? 1,17
?###???#?????.??.??. 13,1,1
?.??#?#????.##??? 1,7,2,2
..#???#?????#?#????. 6,6
??.?#?.???#??? 1,1,4,1
??#.???#?#?. 1,4
??.???...?????##? 2,7
??#??????.???.?.?? 1,3,1,1,1,1
??#?#?????#??????# 6,3,5
?#???????????? 2,6,1,1
???#???#.??#?.??. 6,1,3,2
??#?##.????.#.???.? 5,1,1,1,2,1
.?#?.??#??.? 1,3
???.????#? 2,2,1
?#???#.#?#?.???#..?? 6,1,1,1,1,2
.??#??.?#. 4,2
?????????.??#???. 1,3,1,2,1
#??.???.?#.?#..?. 3,2,1,1,1
##.??????#??###????. 2,9
?.??#??#?#??...??. 1,8,2
?..???#????#????#? 5,4,3
????#???##???#? 1,2,8
????????#????#??.#? 6,1,1,1,1,2
??#?###?.#?.?? 7,1,1
??..?#?#?? 1,2,1
????????#??#. 4,3,1
.?#.???##..??#?? 2,5,3
????.?.#?.?.?##??? 1,4
????#???#?.?####. 7,4
?.???????#??#? 3,5
#??????.?#.??? 1,2,2,1
???.??.?#. 1,1,1
##?##??????????.? 5,1,1,1,1
?????????##???.#??. 5,3,2
????????#.#??.# 4,1,1,3,1
??.??#??.??# 5,1
?#.???.??.? 2,2,1
?.#??????.#???# 1,4,2,2,1
?##??#??.??..?.? 2,3,1,1,1
????.#??.?#???#?.?. 1,1,2,2,4
????.????#??.????# 2,2,3,1,1
??.??.??.? 1,1
.??.?##??...?#???. 3,3
.?????????#?##..?. 3,1,5,1
?.???#..????? 1,3,3
?.#?.?#.#???? 2,1,2,1
??#??#?#?.??.#.??? 1,7,1,1,2
?#.??#?##?#.?##??#? 1,1,6,2,2
?#????????.?????..?? 9,1,1,1
.????#??#?? 2,5
#?#?.????? 3,1
.???.????? 1,3
????#.???.?#????#??? 4,1,8
???#??????? 1,5
???..?.??.. 1,1,1
.??.?#..??#?.???? 2,2,3,1,1
????.?????? 2,1,1
#.?...?????? 1,1,1,1
##???.#.#?#.##..? 4,1,3,2,1
???.#.#???#.#?? 1,1,5,1,1
?????#?.??#?. 4,2
???#??#.????#?.??..# 1,5,4,1,1
????##????##? 3,8
?##???####?#????..?? 12,1,1
???.?????.. 1,4
?#?????#????##?. 3,5,3
???.?????#.?? 1,4,1
??.#?.???#?.??.? 2,2,4,1,1
?.???????#????##???. 1,1,7
??????#?#???##?.? 8,3,1
.??????#???.? 1,5,1
?????#??...?#??? 5,1,4
.?????.???? 4,2,1
????.#??.???????? 3,3,1,1
#????????##????? 1,8,1
??.##???#? 3,2
?#???..???????? 3,1,2,1,2
?.???????? 1,2,2
??#?.##??????#.?#??? 1,1,9,4
?#?#?##?.#?. 6,1
???#????????#?#?.?? 2,1,3,1,2,1
??#??#?????#??? 4,4
?#?.?##??#..?##? 1,6,3
????##?..?.#? 6,1,2
??##??.?#?.?. 1,4,2
???##????????? 1,4,3
##?#??.????#?###???. 2,2,3,4
???##???#.??? 5,2
?..?#?#?##?#????#??? 10,1
??.???##?#??????? 1,7,1,1
?..#????##?. 1,4
?????.??#? 1,1,3
?????.?#?#?##??.??#. 3,8,3
.??#?????.##????##. 7,2,1,3
.?????#?.?.??.? 1,2,1,1
?#???????????.?#?#? 4,7,4
??.????#?#.#??. 1,1,3,1,1
???#????.?? 6,1
?????.???? 2,2,3
?.#????????.?.? 4,2
??????#?#???##??#?? 1,16
??#???????# 5,1,1
?..#?.?#??#.??????? 1,2,1,3,3
?.??#??#?.??##?? 1,1,5,5
?..?????##??????#??? 1,1,8,1,1
?.#?????##??#.?? 2,5,1,1
.?#?#.?.##????#?? 4,1,5,1
#???????#??#.?#??. 4,7,1,1
#????.#???##.? 5,2,3
?????????#?##??????? 2,1,11,2
#?.#??????????#? 1,4,4,1
??#?#?.#???.?##????? 5,4,4,2
???????##??.? 2,4,1
?.#????????..?? 1,1,1,2,1
??..???#??#??#?#??. 1,8,5
?#?#??.#?#?? 1,1,4
?.?.#???.???. 1,2,3
???..?.?????.? 1,5,1
???#??##?#?? 8,1
.???#?.?.? 4,1
#.#???.??????#?# 1,3,3,4
????????#.??? 1,7,1
??#???##??? 1,5
#????????#? 2,3
.????.???#?.??#? 3,2,3
?.?#.??#?.##???? 2,2,6
??#???.???.????. 2,1,2,1,1
.???.??.???####?? 2,2,1,7
.?????#??#???? 2,3,5
??????#??##? 2,1,2
..?.##??.??#?.# 1,2,1,3,1
.??#?.??.??#??. 2,1,4
?.??????#?#???#?? 10,2
??????#??????????#?# 1,1,15
?????#?###??..?? 3,7,1
???#??????#?.# 5,2,2,1
??#??????##??#??.??# 6,7,3
#????.???#.????# 1,3,2,2,1
.#?.?.?.?. 2,1
#?????#..??# 4,1,1,1
?#??.???#?????#?# 1,1,10
?.#???#?##? 2,6
...?.#????#???# 1,1,2,1,3
??.??????#???.?.? 1,1,1,6,1
?#???#??.??? 3,4
.?#..???#??? 2,3
.?#??????.???##? 2,2,1,3
?#?#..??????.#?#??? 4,1,2,1,4
?.??.????. 1,1,3
???.?.??????#?#??# 2,1,9,2
??..??#..?#????##??. 1,2,9
??#?..??.? 1,1
???.???.??. 1,3,2
.?###????? 5,1
??##??#???# 7,2
.?###??#?#?#?#?#?? 8,1,1,1,1
???###???##?????#?. 12,2
.?#??.???###?.? 3,6
?..?#.???#???.. 1,7
???.?????#?#?###? 2,12
????????#??? 1,3,1,2
????????##...?.?? 1,3,3,1
..#??..#???? 2,4
?.??#???????#? 1,3,4
???????#??.?# 9,2
????..????##??# 3,9
????.??#??#?#??????? 2,15
?????#??#??.## 1,2,1,2
??????#.??#..?.# 1,3,1,1,1
#??????.??#?#?? 5,1,1,4
???##?????#?#?..?#? 9,1,1
?####???????#? 4,1,3
????#?#?.??##???? 8,1,5
.????#?.?.? 4,1
????##???.??#?.?. 6,3
.?#??#?????......??? 10,2
???.?#.#?##????.#?? 3,1,1,4,1,1
?.?#??.??.??#? 4,1,1,1
??##????#?? 4,4
.??.?#?#???##?? 2,4,3
??#??#?????# 7,3
?#?#?.???????#.???# 4,1,1,1,1,4
?.???????##??? 5,3,1
#?.?##?.?. 1,2,1
????????##???##????. 2,1,10
#.#?###????????? 1,13
???#??#??#???#.?.?.# 5,5,1,1,1,1
????##.?#???#?????## 5,1,4,2
#??????????#. 1,1,6,1
#?#.??????????#? 3,1,2,5
.?.?????.??.? 3,1
###???.####???#??# 4,1,4,1,1
?###????.?????.?#? 7,1,1,1,3
?#.#??#??.?.?????? 2,5,1,3,1
#??.????..?##?.? 1,4,4
.??.????#. 1,1,1
..?.#?#????#. 1,1,4,1
..#??????#?????? 2,2
?????.#???.???.#?#? 1,1,4,1,1,2
?#??.#.????.#??????? 2,1,1,2,3,3
?????.##?##???? 1,1,6,1
???????#?#######??# 3,14
#.#??#?##??##??#?? 1,12,1
.?#???.??.????#.???? 5,1,1,2,1,1
??.?#??#??? 1,5
.??????#??#????? 1,10
?#????????????? 4,9
??##?????.?#? 6,1,2
??..??#?#? 1,1,1
?.?..#????. 1,3
?.?.??????#??#?#???? 1,1,1,2,1,8
?#.?.?.???#?#.#?? 2,1,1,5,1
????#???#?#?.?? 11,1
#???????????#????# 14,2
?.??#?..#? 3,2
#?.??##?????#???###. 2,4,3,4
???.?#?.#??? 1,1,3
??#.???#??##???#?#?? 1,13
?#.?#????? 1,2,2
?.??????????#?#?? 3,6
?#?.??.???#..?????? 2,2,1,1,1,3
?#?????.???? 1,2,1,1
??#??.?.?##???? 1,7
?###???#??? 5,1,1
???#???#?.#???. 8,1
??.?#..??#?#.?. 2,2,1,1
??????????? 3,1
.????#??##?????##? 7,4
.???????##???????#? 1,7,8
????.?#????.??. 1,1,1
??#???#?.?.?.????# 7,5
???.??#??. 3,3
#??..?#.???????????? 3,2,6,2,1
???#????????? 4,1,2,1
???#???##????????.. 1,13,1
?????????? 1,3
?#?.??#???. 2,5
??.???#??### 2,4,3
.????#????#??#? 4,1,5
?.?.???##???#?#?. 1,5,6
.##??.?#??? 3,4
????????#???.? 4,4,1
?##??????.??. 4,1,1,1
##????????###?#.. 2,12
????#???????.?? 6,2,1
.??####???#..???? 10,1
?.#???#?#??#??#??.. 1,2,3,2,3
????.??#?#??????? 1,12
?#?#?????? 1,1,1
?#?.?..#?.??#.? 1,1,1,2,1
???????..?.? 1,1,2,1
?#??????#?#.????..?. 1,7,3,1
?#?????????.???? 1,6,1,1
.???#????..#? 1,1,3,1
???????????##????? 2,12,1
????????#.? 5,1,1
????#??#?.?#. 4,1,1
.??#?#???.. 2,4
.?????????#.??.?#? 4,1,1,1,1
????#???#??.?#.?#? 9,2,2
??##???????#???. 3,5,2
????.??.?. 1,2
??#???#?#???? 1,8,1
.???##?????#.?.#? 5,3,1,1
#??????##.??#?? 2,5,5
#?##?????????.. 10,1
???#?##??#???#?#??? 1,14
???#?##????? 1,1,7
#?#?#.????? 3,1,3
??????.???????? 1,4,1,2
?#????#?????#??? 8,3
.?#?#?#??#? 1,6
.??#?#.???#?????? 1,1,1,2,4
.??#?.#??????##?? 3,1,1,3
????.????.???.???.?? 3,4,1,1,2
????#??????.? 1,5,1,1
??#??#??????#?#???? 3,1,10
.#???###?#???..? 1,5,1,1
#???#???????#?# 2,2,5,1
??????????? 1,2,1
????##?#???.#????.#? 1,6,3,1,1
?##??.#??. 2,1,3
?.???##??#?#??#??.?. 10,1
???#??????#?#??????? 2,1,8,1
?#????#?#??????.?. 8,3
??.????#???# 1,1,1,2
.#?????.????..#? 6,1,1,1
.#?????##?# 2,6
?#?????????. 2,5
??#??????????#.?#??? 5,2,1,2,2,1
.??.#.###.#?. 2,1,3,2
#?????????????#???? 1,7,1,1,1
???#?#?#?#??????#??? 8,1,5
???.?????.????????? 1,1,1,1,4,3
???..?.???????#? 1,1,1,4
??#???#?.? 2,2
.?#?????#????? 1,1,4,2
..????#???#? 1,1,3
????#?##????#. 2,6,2
?##??????##?.##? 3,6,3
???.?????#?#???? 2,10
??.???????? 1,4
?.?????#?? 1,3,3
#???#???#?? 1,7
??##???##?.. 4,3
??#??????#? 2,1,1
?#.?#??#??.#??.??# 1,3,1,2,1,1
?.###?.#?.??## 1,3,2,2
????#?.?..???#? 1,1,1,2,1
?#.???#??????#??#??? 1,1,5,1,3,1
#..???##????? 1,5
.???#??#?##????###?? 12,3
.#???.?#?????#? 1,1,3,1,2
#.??????#?.??#? 1,8,3
???????.???.. 1,1,3
??????????????#? 1,3,1,3
??.?#??#?##?.?? 1,1,5,1
##?###?#???? 2,7
??????#..##??#.?# 3,5,1
.?.#???#???#??#?#. 1,7,1,1,1
.#??#???..?????# 1,5,4
?.???.??##?#??#?#? 2,10
???#?.??#???#???..? 4,9
???##?#??#???#???. 2,9,1,2
???.????.?.???##???? 3,1,7
..???????. 3,1
?????#?.?????. 6,4
.?#???#???##??.#?... 11,2
?.????##????? 5,3
.#??.??#?#??#? 1,1,4,2
??#?##????????????? 6,1,4
?.?????#?? 1,2,4
???.#.????#?#?? 1,1,6,1
??.?#??????.????? 4,2
?#??#??????#? 7,4
????????#?? 1,1,3
...??????..?#????. 5,5
???..?#??. 1,2
##..?..#.#???. 2,1,1,4
??###????.? 8,1
?..???#??.????..? 5,4,1
???#??..#?# 1,2,3
????#??#???.#.#?. 9,1,1
##?#??#???#.??? 11,1
???..????##.#..?#.?? 3,1,4,1,2,1
????.??#?? 1,3
???#?????? 5,3
?#??#??????#?.??.#?? 1,4,3,1
???##???..??? 6,1,1
??#??#?????#?? 8,2
???.#??.?# 1,1,1
?#?.??.????. 3,2,1,1
.???#??#??? 1,5
?#????###??#?.# 3,7,1
??#?#?#?.??????#? 7,1,2,2
?###??#?#?? 3,3
#?????#???.???? 1,5,1
?#??.?#???? 1,4
?#????#?..#? 6,1
????#.??#?? 4,3
#?????#?????.???.#. 2,8,1,1
.??#??????#?#??? 3,7
??##??#?.????# 1,6,2,1
????#??????##??#?? 1,1,13
.?.??????????#??..# 11,1
????#???.??? 3,1
#??#.?.?.? 1,1,1
?.#???.???????#..? 4,5,2
?#????#?..?#????#? 3,3,2,2,1
?????.#?????#???# 4,7,3
.#.????.??. 1,1,1
????.##?.?? 1,2
???????##?#?? 1,8
???.?#???#??##????. 1,2,1,1,3,1
.??????#???#?##?##?? 1,13
.??????#??###?.????? 11,2
??.???.???. 1,3,1
???##??#..##? 5,1,2
??#.##????#?##????? 1,1,3,6,1,1
??##???#?.#??##??.?? 7,6
?##??.???.??.???# 4,1,1,1,1
???.???.?#?##???#.?# 1,1,8,2
.?.??#?#?.#??. 1,5,1,1
?#???????? 3,2
?.?#?#???? 1,2
??..#???#.?.?#? 1,2,1,1,2
?.???#????...?#?? 4,3
?#?#???.????? 4,4
??#??#.???? 5,1
.?#??#.?.? 1,2,1
????????#??#???# 4,1,4,1
#?#????#?#?. 3,3
.?????.??#.?#? 5,1,1
#?.??#??#?.?.???. 1,6,1,3
?##??????# 5,1,1
.?#??#???.????#.?# 7,1,1,1
???#???????# 3,1,2,1
???#?#?????#?#.?? 7,3
???.??#??? 2,1
#????????##?????? 1,2,10
??#???.??. 6,1
?#?#.??#???? 3,4,1
???#?##???.??? 8,2
?#???.#??????? 2,2,4
?????#???. 1,4
?#???????#???#.?. 1,5,3,1
?#?.?#?#?????. 1,3,1
?.??.?#?#??##???? 1,1,10
???????????#? 1,4,1
##?????#..??#?#?#.?? 2,3,1,7,1
.#??.?#????? 2,1,3
.????#?.?.##???.? 4,5
?#.???#??#?#??#? 2,11
????????.?#?????#??? 7,3,4
?.??##????.??. 3,3,1
?#???#?#?#????? 2,8,2
???.#??.???#.?#. 3,1,2,1
.???.#.?.?. 2,1,1
?#???#???.??.. 5,1,2
?##?????#?##????#?. 9,2,1,1
?????#.?????. 2,2
.???##??#????#?#?.?# 2,13,1
??##.???.??.#.????? 4,2,1,1,1,1
#?????.?#???#??????. 3,1,1,1,3,1
???#?????.???? 4,1
###?###????#?.?#?# 9,2,2,1
????#??#????#.?? 11,1,1
??#????#?? 1,1,1
??.???#??.?????? 3,1
???#?????.#?#??..?# 7,4,2
?.##.??#?? 2,4
#.?.#?#??????.#??. 1,4,1,1,1,1
?##???#?#.?#?. 9,1
?????????????? 1,7
###?.##??#???? 4,8
??.#?#???#?#??????? 2,7,2,1,1
?????????? 1,1,2
??#??#?#??##?? 6,3
?#???#?.##?#??? 6,4,1
???????#?.???? 9,1
???##?????##?#.?.. 1,11
#????#?.????.?#????? 1,3,2,1,2,2
???.#???#????#??#?? 1,1,1,1,1,5
??#????#??#. 1,3,3,1
?#?##???#?. 1,3,1
#??#??##?#???????? 12,3
.???..??.##??? 2,1,4
?#??##?#?? 1,2,2
?????.?.#? 2,1,1
?#???????.????## 1,1,3,6
????#?#.???#?#?.?# 1,3,6,1
.??#?.??#? 2,2
?#??#?????.??? 1,4,1,1
?.????#?????#???? 1,1,1,9
??#?????.? 2,4,1
??.???#?#????.##??? 1,7,4
.?#?#????#?#???????. 4,11
.???.??.#.###????? 1,1,1,6,1
?#????????.???#????? 1,4,5
..#???.???????# 4,3,2
??????#????..#?.??. 4,2,2
????#??#???? 2,1,2
??..#??###?.?###???? 1,7,7
??#???.?????? 2,1,1
?.???.???..?. 2,2
..##???.?????.. 3,1
?.??.?.?????#???? 2,8
??.#??###?#??????#?? 1,8,1,1,1,1
?#####?#???????? 6,1,1,1
?.?.?????#?????? 1,2,3,4
?#??###?.?.? 3,4
.????##??? 1,5,1
?????#?.#?.#?#?? 4,1,1,2
.????#???#??#?#?.?# 4,7,1
????#?.???.?#? 1,1,1,3
?????.??????## 1,1,1,3
?.?##?????#????#?? 2,10
.??#????#??.?????.? 1,6,1,3
????#???.?.??#.. 2,3
??#??#??.?????????? 6,1,7,1
.#??#????????#??? 2,8,3
???????####???.#???? 1,7,1,3,1
????.?.?.#???#?? 2,1,1,2,3
??.?#?#.##??.#???.? 4,2,4
??##?????????? 2,3,3
??????##?????#??..? 3,2,2,4
????.??####?#???? 1,9
#?#????###?#??.?? 5,3,2,1
?#?#.??#??.?.#?. 3,3,1,1
?????.##?. 1,2
.????????.?#??#. 2,1,1,1,4
???#??.?#????? 1,3,1,3
????????.?#####???.? 3,8
????#???.??#??##?#? 1,2,9
.?#???#??.#? 6,2
??#????#?? 1,7
??#?..???.? 1,1
#???.??#.?#???.# 1,1,3,2,1
???..????#? 1,5
?????#????? 2,1,1
??.????#????? 2,2,1,1
????#?##?#??#?.. 8,1,3
.???????.#?..? 2,3,1,1
?????#????#??#?.??? 6,5
.????#?#?.? 1,5
?..?#???#?????.???? 1,7,2,1,1
??#???##?.?#?.???? 8,2,1
?????..??##?.?.? 1,3
#?????#?..??..?? 8,1
?.???#?#??#??????? 1,7,1,3
#??#.??#??? 4,4
???.?.??..?#??????.? 2,1,7,1
????.?#?#????##??.? 1,12
??????###?.??.??# 3,6,1,2
??.??##.???? 2,1,2,2
??#?????????###??#? 3,6,3
.#??.?#????? 3,1,1
#??????????. 1,1,4
??????.?#?? 5,2
???#?.#?.? 1,2,1
#??????#???????#?.? 1,12,2
???????#??.? 2,1,2
..?##..?.??.? 2,2
..?.??#????#?????.#? 12,2
?.#??#???.#.??# 2,1,1,1,2
?#..???#???????. 2,9
?#???#???????.#.. 1,8,1
??.??#????? 3,2
.??????#????#? 2,8
?.????.?.#?#?#?#??.. 4,7
.....??#???????## 7,3
?.##???#.#????...?? 6,1,2,1
??..?#???????.# 2,1,1,1,1
.????????.???#?????? 1,2,1,9
?.??.?#???????.#?## 1,1,3,1,1,4
#?.??????#???????#?? 2,1,3,8
.????.?.#? 3,1
.??.?.??#?##?#????.? 1,11
??#?#.?.????#??????? 3,1,1,5,2
..##????.? 2,3
????#??#???? 2,1,1,1
?????.?##? 1,1,3
???.#???.?#???# 1,2,3,1
?##.?..?#??? 2,1,2
??.?????#??#??.? 2,3,1,3,1
#?##?#??##?.???.?? 1,9,1,2
??.??????????#.?# 1,1,5,1,1
..?####??.#?#?#??#?? 4,1,8
?#?.??????##???? 1,4,3,1
?.????##.???#?? 1,2,5
???#????????#??# 2,4,1,1
????#.??#.?? 5,2,1
?.???#?#???#?.?#?#.. 1,1,1,6,4
.?????#?.#?????????# 3,2,1,9
????..?????...#?? 3,3,2
.??.?.?#??. 1,2
??.#???#?????#??#??? 1,7,1,1,1,1
??..#??#?#?##???#?#? 2,2,1,1,9
????#?????????.?.? 1,2,4,2,1
???#???.#??#???#?## 1,1,1,6,4
#??##??#??.#??????? 9,2,3
??.##?##??#??####?.? 8,5
???#?.#.#?????? 1,1,1,1,4
????????????#????? 2,3,1,2,1,2
??#.?##??#?#???? 3,5,2,2
#?.??????#????????? 2,1,2,2,3,1
??.??#?#??.?#.#. 2,2,3,2,1
.??#?????? 3,1,1
???.??.?#????#?? 1,2,2
##???????#?#.??. 4,7
????#.#?##?#????# 1,2,11
???..???#..? 1,3
???#????#?##? 2,7
#??????#??# 1,2,4
.???#?.???#?#? 1,1,1,4
??????????#?##? 1,10
..??????#.##? 1,1,1,2
?#.??#?#.??#?#?##? 1,1,1,7
.??#.?..?? 1,1
???????????#??..#?## 8,1,1,4
??#.????.? 2,1,1
????#??????.???? 8,1,1
.???#??.##? 1,1,2
#????????#?? 1,1,1,4
...#????????. 4,2,1
.??????#?#?.? 4,4
#.??#.?#?. 1,2,2
.?????#?#????#?##? 1,5,5
??..???#?????? 1,4,3
.???????.?????#...?? 6,2,1,1
???#??.???#??###?? 4,8
??.??.#??????#????? 2,10,1
?#????.##?.##???.?? 1,1,2,3,1,1
##??###??##??#?.? 12,1,1
???.?##?##???????#.? 1,7,3,1,1
.????..#.. 2,1
?#?#??#.#?#?????.?? 7,3,3,2
..??#?#????.? 6,2
?#?#??.##???.???? 2,2,5,1
###.?#???? 3,1,1
.?#?????????#.?.# 5,3,1
?.?#####?##.??????? 9,3
.????.#????#?.?. 3,7,1
??.???.????#?? 1,3,6
?????????. 1,1,3
?#.?????.??# 1,3,1,1
#?.????##??????#? 1,1,9
??#????.?##??.?? 6,4,1
.#???#.#??.#???. 5,1,1,1
..#????##???#?? 2,9
?.???.???#???#.???# 1,1,4,1,1,1
#??#?###?#?. 1,7
#.?#?.?#??#?#?? 1,1,1,4
??#?#????.?????? 5,1
.???#?????#??#? 1,3,5
##?.#?#?#? 2,3,1
.?#????.?????#? 2,1,1,4
?#??##??#.????.? 2,3,1,1,1
???#??.??# 5,2
????#?????#??? 3,1,4
.?????.?#?#?.???? 4,5,1
.??#??.??????# 2,5
???#?#??#??#?#??#?. 3,9
.?##??.?.????##???.? 4,4
?##?.#.???? 2,1,2
???.?.?????#.#?.#? 1,1,1,3,1,1
??.#?????#? 1,8
#??.#??..??? 2,1,2
#???????##????? 3,6,2
##?.????## 2,1,4
?.#.?.#??#?? 1,1,1,2
????.?.??#?..? 4,1,3,1
??.?#?#????#? 1,5,1
#?????#.???#???#?? 1,1,1,1,1,7
??#?.#??.?..??? 2,3,1,1
???#????#?##???..? 3,7
?????..?????? 4,4
?##?.????????????# 3,2,1,1,2
.????#?.#? 1,1,1
#??????.?.####????? 1,1,3,4,1,2
????.###?.? 3,4
..?.#?#???????#???? 1,10,1
???.?#.?????? 3,2,1,1
???#?#???..?.#? 8,1
.??.?????#?????#??? 1,1,10
?????????#.?#???? 2,2,2,1,1
??.???????#??????? 1,4
?.#?.??#??# 1,4
??????.??#????#?. 6,4,1
?..?.?????#. 1,1,5
?????##??#?.????..?? 7,2
?..###.??#?#???##?#? 3,11
?.#?????.?#??#?????? 1,6,7,2
??#.?.????#??#??#?# 1,1,1,8,1,1
?.??#????#??..#? 1,1,1,5,1
???#??????#?.????.?? 1,3,6,1,1,1
??#.#.#??#???#?? 2,1,9
??#?????#?? 6,2
#?#?##?#?#.#?#?????? 8,1,1,1,2
???.????#??#?#?? 1,4,6
.??????#???#??? 3,8
??.??#?#?????? 1,1,6,1
??.??#?.????.??. 1,3,1,1,1
..????#??#??. 1,8
?#?#....?# 3,1
#??#??#???? 7,2
?????????#???.??#?. 1,1,5,1,1,2
#?.??#??##?#???? 2,7,1,2
.?#.??#??#???? 1,9
???#???#?#?#?#.????? 2,1,7,1,1,2
???#???#??????#?.# 1,2,2,1,1,1
??#???.???.?????? 3,2
???#?#??????? 7,1
#??????????? 5,2,1
#???.#?#?#? 2,6
??.?.?????#? 1,6
????#????? 4,2
#.?#????##???.???? 1,9,1,1,1
.??????#??#??# 1,10
.??#?....???? 2,2
??#??#?????#????? 1,1,8,1,1
???##.??#? 3,1
?..???.##?##?###?..? 2,9
#??#??????????.?? 1,6,4
.??#???#??????????? 7,4
???#????##?#?#??.#? 1,3,5,1,1,2
#.??##??????##?#??? 1,5,6
?#??#???.??#???##. 7,1,1,3
????.??#?.? 3,2,1
????????.#.# 7,1,1
?#??###.?#??#? 6,4
?#??#?#?#??????.? 1,6,2
?????.???#?#.? 1,1,5
???##?..?#. 4,2
.???.??#???. 1,5
.#??#.?????#. 4,2,1
#????.#?.?#??????### 1,1,1,3,1,3
????????#?#?. 4,1,1,2
#.?.??.????? 1,1,1,1
#????#??.????#??? 1,3,5
?#?.??????? 1,3,1
?.?????.?#???.?? 3,5,1
???????#??...#.? 7,1
?.#?#??.???.?? 1,3,2,1
??#????????#???.? 2,8
##???#???..?????.?#? 9,2,2
?##.??????? 2,1,4
???#??#??##.?? 1,2,2,1
#??.#?.#..?.???#?? 1,1,1,1,3,1
.?#?#??#?.?#??#????# 4,3,7,2
????????#??????... 1,1,6,1,1
.????#?#?##. 2,6
???##???.????. 5,1,3
.????????????? 1,3,2,1
?#???.#?????????#. 2,1,1,2,2,1
?#??????.????? 8,1,2
.?##???????#?? 9,3
.???????#?##??#??. 2,11
???#.?????#?#?#??? 1,1,9,2
#???..??.?????.?? 3,1,2,1,1
.????.?#?????####? 4,11
????.????.?????.. 3,2,1,1
???#?#?#??#???#??#?. 1,5,9
.??##???#?#?????. 9,1
?#.???..#????#??? 2,1,1,3,1
?.?.??#????##? 1,3,3
.#.????????.?.#? 1,7,1
??????#??????? 1,5,2
?#??###???#? 1,4,2
?.....?##.? 1,2
.##.###??##?#????. 2,10,1
???.???????##?? 2,1,1,3,1
??.?????????.?#.??? 1,7,1,1,2
?####.??.##????##. 5,2,3
?.??#?????? 2,3
?????.???##?#??.? 1,5
??#?.?.???###. 3,1,3
.?##?#?.???#???#?? 5,6
?.?.#.#??#?????? 1,1,1,1,7
#?????.????#?#??? 5,6
???#.???#?#.? 3,4
#???##.##????.??? 3,2,6,1
?.??????..??????? 1,1,3,2,3
?????????## 1,1,3
????#????#.?##??#??? 5,1,2,6,1
???????##?#?.?. 1,1,6
??##?????.??? 6,1,1,1
??#?.#????????#?. 1,1,1,2,3
??.?#??#??????.? 1,4,5,1
.?.#???????##?? 3,1,3
?????#??.?.??#.??# 1,4,1,1,1,2
?..?#?????#??#?#. 1,2,1,6
..#.????#?????? 1,2,6
????..?????# 3,6
??#?????#??.? 9,1
#.??.##??.##.? 1,1,3,2
##?????.???? 3,1,1
?.?????#?#??.???#?? 1,2,5,1,1
??##?.???.??? 5,1,1
?.????#???.? 1,3,2,1
??#????.#?. 5,1,2
????..??????.?#??? 1,1,4
??#?.??#?.. 3,2
?#?.????????? 1,5
#??.?#??#?.?? 2,6,1
??.?#??????? 1,3,1,1
???#?#??#??#?????? 11,3
.###???..???#??? 3,2,6
??##????.. 3,1
#..?????????#??###?? 1,1,1,2,1,4
#.????#?##? 1,2,5
????.##???????#??. 2,2,2,4
?.?????##?. 1,4
???..?..?..???# 2,1,1,1,1
??..##??#?#??. 3,5
?..#???#?.?????#? 1,6,1,1,2
???.?.????##?#??#?#. 1,1,1,2,4,1
??..#??.?##?? 2,1,1,3
?.?.???...?.??#??? 3,4
.??#???##? 2,3
???.????#?? 1,3
??#??..?#?..? 5,2,1
???#.???.????..?## 1,1,1,4,2
?.?.#.???#??##?????. 1,1,11
#.??.#.????? 1,1,1,1
????#?#?.??. 7,2
#??????????#?.??? 4,4,1,1
??.??#?.???#?.?.? 2,3,2,1,1
.?.#??????#?. 1,3,2
????????##??.???#? 1,8,3
.????..?.???????? 1,5
????#?##???? 2,4
?##.#.???#..??#?.?# 2,1,2,1,3,2
.??#.?????..#?? 1,1,3
.?.?#??.#??? 1,1
??##????????.?.??? 9,1,1
??##..#..??? 3,1,2
.???????????? 2,2,1,1
.????#????#??#??#### 1,1,1,11
#??##?.??.???.???#?# 1,4,1,2,3,1
??#??????. 1,1
.?#?.?.???????????? 3,1,4,5
???#..#???.?# 3,3,1
???????????? 3,1,1,1
.#????.?###.?.?????? 1,2,4,3,1
????#.###?#??? 4,3,1,1
?????#?????#?..???? 1,1,2,1,3,4
?...#??##?#?.? 1,4
???????????????#??? 1,1,6,4,1
.??????#??#??????. 3,8
..???????? 1,1
#?#??#.????.?? 4,1,1,2
#.#.?????#?#??????? 1,1,1,9
.?..#?#?#????.?? 1,9,1
##?#??#??#??#.???? 11,1,1
???.???#??#.##??#?? 1,7,3,2
??..?#.??#?????#??? 2,1,4,2,1,1
?#?.???.#??? 2,1,3
????#?.?..#?.??#??? 1,2,2,5
.?????.?#?? 1,3
???.?.??##? 3,5
?#?.?????.???? 3,1,1,3
?.???#?.#??## 1,1,1,5
????.?.??? 4,1,1
????????.. 2,1
???????##?.?.??. 3,1,2,1,1
?#????#.????.#. 2,2,1,4,1
??.#??#??#???#?#?? 1,1,5,5,1
.????.?????#? 2,3
???.??#?#????.?#??#? 1,4,1,1,6
??.???#???#????.?. 1,2,1,2,1,1
???????##???##? 3,2,5
??.?#.???????. 1,7
..??...#????.?? 2,4
?#??##??.?#?? 5,3
???..#???. 2,1
?.?#?#?#?#??.???.#?# 1,9,1,1,1,1
????#??#?#??? 3,6,1
.???..????# 1,2,1
????#??..??????? 1,1,1,1,7
??????????#?# 1,2,3
.???#??????#??????? 1,12,2
??#?????#..#?? 2,1,2,3
?.?#???#?##????#. 1,1,1,6,2
??.?#??.??#.??##?? 1,4,3,2
.??#?????????#? 9,2
???????#??..#?..?. 5,2
#??.??.?#?#??#?? 1,1,2,8
?????.????#????# 2,9
??????#??.. 2,3
??????..?#??#? 1,5
????????#??##??? 1,1,1,1,3
???#???#???.?# 1,8,1
??????.?#.??.?. 1,1,1,2,1
??.###?#?????????.?? 1,5,3,2,1
.?????#???#????? 11,1
?###??##?#???#.??.? 12,1,1
????#?#???#?#???? 4,8,1
???.?#?#.?? 1,3,1
#?#??#.??.?#.????? 1,1,1,1,2,4
#?##?..#?## 5,4
????#?#..???#???##. 4,4,3
##?.?##???????? 3,2,5,1
.??#?####.## 1,4,2
???#?#??.??????? 1,3,2,1
?#?#??????.? 2,1,1,2
#?????#????#? 1,6,1
??#?????##..??.#???. 9,1,1,1
#??#?????????.?? 1,6,1,1,1
??.???????#???? 1,1,1,2,1
???#.??#??#?? 2,1,7
??????????????#??#? 3,1,2,1,1,1
???##??##???#??#?? 1,3,10
??????#??#? 1,1,5
?????.?#??.????.?. 3,4,1,1";

var smallInput =
@"???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1";

//var containsCount = ContainsCount("aa.a", ".aa");

var smallest = ".?#?.??.????.#??? 2,1,3,3";

var input = smallInput;
input = fullInput;
//input = smallest;
var timer = System.Diagnostics.Stopwatch.StartNew();
var repeats = 5;
repeats = 0;

var result = 0l;
var result2 = 0l;

while (input.Contains(".."))
{
    input = input.Replace("..", ".");
}


//var xqqqx = SolutionCountAlt("??#.???#?", new List<short> { 2, 1, 2 });

var lines = input.Split(Environment.NewLine)
    .OrderBy(x => x.Length)
    .Select(x => x.Split(" ")).Select(x => (condition: x[0], groups: x[1].Split(",").Select(short.Parse).ToList())).ToList();
var maxGroup = lines.SelectMany(x => x.groups).Max();

var cacheWithUnknowns = new Dictionary<string, long>();
var cachePrecise = new Dictionary<string, bool>();
var cacheReduce = new Dictionary<string, List<(string, List<short>)>>();
var cacheGroupCounts = new Dictionary<string, List<short>>();
var cacheSolve3 = new Dictionary<string, HashSet<string>>();

//var eex = Solve2("?##?#???", new short[] { 5 }.ToList());



//var xx = GetGroups("###..##.###").ToList();

int j = 0;
bool useCache = true;

bool printSolve = true;
printSolve = false;


//var aa = OnlyQuestionMarks("???.??", new List<short> { 1, 1 });

foreach (var (condition, groups) in lines)
{
    var largeCondition = condition;
    var largeGroup = groups.ToList();
    for (int i = 0; i < repeats - 1; i++)
    {
        largeCondition += "?" + condition;
        largeGroup.AddRange(groups);
    }
    Console.WriteLine(j++);
    Console.WriteLine(Hash(condition, groups));
    Console.WriteLine(Hash(largeCondition, largeGroup));
    useCache = true;
    var algo1 = SolveCached(largeCondition, largeGroup.ToList());
    result += algo1;

    var debug = false;
    //debug = true;
    if (debug)
    {

        useCache = false;
        var algo2 = SolveCached(largeCondition, largeGroup.ToList());
        result2 += algo2;
        if (algo1 != algo2)
        {

            var algo3 = Solve3(largeCondition, largeGroup);

            Console.WriteLine("broken!");
            Debugger.Break();
            Console.ReadLine();
        }
    }

    Console.WriteLine(timer.ElapsedMilliseconds + "ms");

}

string Hash(string condition, List<short> groups) => condition + " " + string.Join(",", groups);

long SolveCached(string condition, List<short> groups)
{
    if (!useCache)
    {
        return Solve(condition, groups);
    }
    var hash = Hash(condition, groups);
    if (!cacheWithUnknowns.ContainsKey(hash))
    {
        cacheWithUnknowns[hash] = Solve(condition, groups);
    }
    return cacheWithUnknowns[hash];
}
long Solve(string condition, List<short> groups)
{
    var count = 1l;
    condition = condition.Trim('.');
    if (useCache)
    {
        var result = RemoveCertaintiesCached(condition, groups);
        if (result.Count == 1)
        {
            (condition, groups) = result.Single();
        }
        else
        {
            foreach (var item in result)
            {
                count *= SolveCached(item.condition, item.groups);
            }
            return count;
        }
    }
    if (groups.Count == 0) { return 1; }


    if (useCache)
    {
        var (newCondition, newGroups) = MultiLevelShit(condition, groups, 0);
        condition = newCondition;
        groups = newGroups;
        var (newCondition2, newGroups2) = MultiLevelShit(newCondition, newGroups, 1);
        condition = newCondition2;
        groups = newGroups2;


        var yieldResult2 = MultiLevelQuestions(condition, groups).ToList();
        if (yieldResult2.Count == 1)
        {
            newCondition = yieldResult2.Single().condition;
            newGroups = yieldResult2.Single().groups;
        }
        else
        {
            foreach (var item in yieldResult2)
            {
                count *= SolveCached(item.condition, item.groups);
            }
            return count;
        }



        (condition, groups) = RemoveAllSames(condition, groups);
        while (true)
        {
            var yieldResult = RemoveAllLargests(condition, groups).ToList();
            if (yieldResult.Count == 1)
            {
                newCondition = yieldResult.Single().condition;
                newGroups = yieldResult.Single().groups;
            }
            else
            {
                foreach (var item in yieldResult)
                {
                    count *= SolveCached(item.condition, item.groups);
                }
                return count;
            }
            var doBreak = groups.Count == newGroups.Count;
            condition = newCondition;
            groups = newGroups;
            if (groups.Count == 0)
            {
                if (condition.Any(x => x == '#'))
                {
                    Debugger.Break();
                }
                return 1;
            }
            if (doBreak) { break; }
        }

        (condition, groups) = RemoveAllSames(condition, groups);

        if (groups.Count == 0)
        {
            if (condition.Any(x => x == '#'))
            {
                Debugger.Break();
            }
            return 1;
        }
        //SolutionCountAlt(condition, groups);
        var onlyOnes = OnlyQuestionMarks(condition, groups);
        if (onlyOnes != null)
        {
            return onlyOnes.Value;
        }

        var groupsDeterministic = WithGroupsDeterministic(condition, groups);
        if (groupsDeterministic != null)
        {
            return groupsDeterministic.Value;
        }


        var yieldResult3 = WithGroupsAlreadyKnown(condition, groups).ToList();
        if (yieldResult3.Count == 1)
        {
            newCondition = yieldResult3.Single().condition;
            newGroups = yieldResult3.Single().groups;
        }
        else
        {
            foreach (var item in yieldResult3)
            {
                count *= SolveCached(item.condition, item.groups);
            }
            return count;
        }
    }

    return Solve2(condition, groups);
}


// .?#?.??.???? 2,1,3 
IEnumerable<(string condition, List<short> groups)> WithGroupsAlreadyKnown(string condition, List<short> groups)
{
    var split = condition.Split('.');
    if (split.Length != groups.Count) { yield return (condition, groups); yield break; }
    for (int i = 0; i < split.Length; i++)
    {
        if (split[i].Length - groups[i] > 1)
        {
            yield return (condition, groups);
            yield break;
        }
    }

    for (int i = 0; i < split.Length; i++)
    {
        yield return (split[i], groups.Skip(i).Take(1).ToList());
    }
}

long? WithGroupsDeterministic(string condition, List<short> groups)
{
    var squashed = condition.Replace("?", "");
    if (squashed.Length == 0) { return null; }
    var atLeastGroups = GetGroups(squashed, '#').ToList();
    if (atLeastGroups.Count() != groups.Count())
    {
        return null;
    }
    var split = condition.Split(".").Where(x => x.Contains("#")).ToList();
    if (split.Count() != groups.Count())
    {
        Debugger.Break();
    }

    var result = 1l;
    for (int i = 0; i < split.Count(); i++)
    {
        result *= Solve2(split[i], new List<short>() { groups[i] });
    }

    return result;
}

long? OnlyQuestionMarks(string condition, List<short> groups)
{
    if (condition.Any(x => x == '#'))
    {
        return null;
    }
    if (!condition.Any(x => x == '.'))
    {
        return null;
    }

    if (groups.Any(x => x != groups.First()))
    {
        return null;
    }
    if (groups.Any(x => x != 1))
    {
        return null;
    }

    var qGroups = GetGroups(condition, '?').Select((x, i) => (key: i, count: x, serves: ServeWays(x, 1).ToList())).ToList();

    var results = new Dictionary<string, long>();

    void Discover(int count, HashSet<string> keygen, HashSet<int> visited, long product)
    {
        foreach (var item in qGroups.Where(x => !visited.Contains(x.key)))
        {
            var visitedClone = new HashSet<int>(visited);
            visitedClone.Add(item.key);
            foreach (var grp in item.serves.Where(x => x.elements <= count))
            {
                var keyCombined = $"{item.key}:{grp.elements}";
                var keygenClone = new HashSet<string>(keygen);
                if (keygen.Contains(keyCombined))
                {
                    Debugger.Break();
                }
                keygenClone.Add(keyCombined);
                var countCpy = count;
                var productCpy = product;
                countCpy -= grp.elements;
                productCpy *= grp.ways;

                if (countCpy == 0)
                {
                    var hash = string.Join("|", keygenClone.OrderBy(x => x));
                    if (results.TryGetValue(hash, out var result))
                    {
                        if (result != productCpy)
                        {
                            Debugger.Break();
                        }
                    }
                    else
                    {
                        results.Add(hash, productCpy);
                    }
                }
                else if (countCpy < 0)
                {
                    Debugger.Break();
                }
                else
                {
                    Discover(countCpy, keygenClone, visitedClone, productCpy);
                }
            }
        }
    }

    Discover(groups.Count, new HashSet<string>(), new HashSet<int>(), 1);

    return results.Sum(x => x.Value);

    //return SolutionCountAlt(condition, groups);

}


// n??? can serve v in these ways
IEnumerable<(short elements, short ways)> ServeWays(short n, short group)
{
    for (short i = 1; i <= n; i++)
    {
        var result = (short)SolutionCountAlt(new string('?', n), Enumerable.Repeat(group, i).ToList());
        if (result == 0)
        {
            yield break;
        }
        yield return (i, result);
    }
}

(string condition, List<short> groups) RemoveAllSames(string condition, List<short> groups)
{
    if (groups.Distinct().Count() != 1) { return (condition, groups); }
    var group = groups.First();
    var groupString = $"?{new string('#', group)}?";
    var count = ContainsCount(condition, groupString);
    //if (count != groups.Count)
    //{
    //    return (condition, groups);
    //}
    while (condition.Contains(groupString))
    {
        condition = ReplaceOnce(condition, groupString, ".");
        groups.RemoveAt(0);
    }

    return (condition, groups);
}

string ReplaceOnce(string input, string search, string replace)
{
    return new Regex(Regex.Escape(search)).Replace(input, replace, 1);
}

// ?#.?.##????#.?.##????#.?.##????#.?.##????#.?.##?? 1,3,1,3,1,3,1,3,1,3
IEnumerable<(string condition, List<short> groups)> RemoveAllLargests(string condition, List<short> groups)
{
    var groupsCpy = groups.ToList();
    var grpd = groupsCpy.GroupBy(x => x);
    var max = grpd.Max(x => x.Key);
    var maxGroup = groupsCpy.Where(x => x == max);
    var nextBiggestGroup = groupsCpy.Where(x => x != max).OrderBy(x => x).LastOrDefault();

    var conditionGroups = GetFixedGroups(condition);
    var notUsableByOtherGroups = conditionGroups.Where(x => nextBiggestGroup < x).ToList();

    if (notUsableByOtherGroups.Count != maxGroup.Count())
    {
        yield return (condition, groupsCpy);
        yield break;
    }

    var item = notUsableByOtherGroups.First();
    var needle = "." + new string('#', item) + new string('?', max - item);
    var index = condition.IndexOf(needle);
    var match = "";
    if (index != -1)
    {
        match = condition.Substring(index + 1, needle.Length);
    }
    else
    {
        needle = new string('?', max - item) + new string('#', item) + '.';
        index = condition.IndexOf(needle);
        if (index != -1)
        {
            match = condition.Substring(index - 1, needle.Length);
        }
        else
        {
            //Debugger.Break(); TODO!!!!
        }
    }
    if (match != "")
    {
        var split = condition.Split(match, 2);
        //groupsCpy.RemoveAt(groupsCpy.IndexOf(max));

        var leftGrps = groupsCpy.TakeWhile(x => x != max).ToList();
        var leftCondition = split[0];

        var rightGrps = groupsCpy.SkipWhile(x => x != max).Skip(1).ToList();
        var rightCondition = split[1];

        yield return (leftCondition, leftGrps);
        yield return (rightCondition, rightGrps);
        yield break;
    }
    else
    {
        //Debugger.Break(); /*TODO!!!!*/

    }

    yield return (condition, groupsCpy);

}

List<short> GetFixedGroups(string condition) => GetGroups(condition, '#');
List<short> GetGroups(string condition, char needle)
{
    var list = new List<short>();
    var previous = condition[0];
    var count = previous == needle ? (short)1 : (short)0;
    for (int i = 1; i < condition.Length; i++)
    {
        var current = condition[i];
        if (current == needle)
        {
            count++;
        }
        else
        {
            if (count > 0)
            {
                list.Add(count);
            }
            count = 0;
        }
    }
    if (count > 0)
    {
        list.Add(count);
    }
    return list;
}


int ContainsCount(string condition, string groupString)
{
    var count = 0;
    for (int i = 0; i <= condition.Length - groupString.Length; i++)
    {
        count += condition.Substring(i, groupString.Length) == groupString ? 1 : 0;
    }
    return count;
}


IEnumerable<(string condition, List<short> groups)> MultiLevelQuestions(string condition, List<short> groups)
{
    if (condition.Contains("#") || groups.Count() < 4)
    {
        yield return (condition, groups);
        yield break;
    }
    var split = condition.Split('.');
    for (int i = 1; i < 10; i++)
    {
        var start = string.Join(".", split.Take(i));
        var lookahead = string.Join(".", split.Take(i + 1));
        var next = string.Join(".", split.Skip(1).Take(i));

        if (start == "")
        {
            yield return (condition, groups);
            yield break;
        }

        var fitsMe = Solve3Cached(start, groups.Take(i).ToList()).Count > 0;
        if (fitsMe)
        {
            var fitsNext = Solve3Cached(start, groups.Take(i + 1).ToList()).Count > 0;
            if (!fitsNext)
            {

                var fitsNext2 = Solve3Cached(lookahead, groups.Take(i + 1).ToList()).Count > 0;
                if (fitsNext2)
                {
                    var fitsNext3 = Solve3Cached(next, groups.Take(i + 1).ToList()).Count > 0;
                    if (!fitsNext3)
                    {
                        yield return (start, groups.Take(i).ToList());
                        yield return (ReplaceOnce(condition, start, ""), groups.Skip(i).ToList());
                        yield break;
                    }
                }
            }
        }
    }

    yield return (condition, groups);
    yield break;
}


(string condition, List<short> groups) MultiLevelShit(string condition, List<short> groups, int level)
{
    var split = condition.Split('.');
    var start = string.Join(".", split.Take(level + 1));
    if (start == "" || !condition.Contains(".") || !start.Contains("#"))
    {
        return (condition, groups);
    }
    var conditionCpy = string.Join(".", split.Skip(level + 1));
    var lookaheadFurther = string.Join(".", split.Take(level + 2));

    var evals = Enumerable.Range(1, groups.Count()).Select(i =>
    {
        var xGroups = groups.Take(i).ToList();
        var expectedChars = xGroups.Sum(x => (int)x) + i - 1;
        if (expectedChars > start.Length)
        {
            return default;
        }
        //if (xGroups.All(x => x < 3))
        //{
        //    break;
        //}
        var x = Solve3Cached(start, xGroups);
        if (i == 1 && !HasSingleSolution(start, xGroups.First()))
        {
            return default;
        }
        if (x.Count == 1)
        {
            var xLookahead1 = Solve3Cached(start, groups.Take(i + 1).ToList()).ToList();
            if (xLookahead1.Count == 0)
            {
                var xLookahead2 = Solve3Cached(lookaheadFurther, groups.Take(i).ToList());
                if (xLookahead2.Count == 0)
                {
                    var xLookahead3 = Solve3Cached(lookaheadFurther, groups.Take(i + 1).ToList());
                    if (xLookahead3.Count == 0)
                    {
                        var groupsCpy = groups.Skip(i).ToList();
                        return (conditionCpy, groupsCpy);
                    }
                }

            }
        }
        return default;
    }).Where(x => x != default).ToList();

    if (evals.Count == 1)
    {
        return MultiLevelShit(evals.Single().conditionCpy, evals.Single().groupsCpy, level); // pass level or 0??
    }

    return (condition, groups);
}

int Solve2(string condition, List<short> groups)
{
    return Solve3Cached(condition, groups).Count;
}
HashSet<string> Solve3Cached(string condition, List<short> groups)
{
    if (!useCache)
    {
        return Solve3(condition, groups);
    }
    var key = Hash(condition, groups);
    if (!cacheSolve3.ContainsKey(key))
    {
        cacheSolve3[key] = Solve3(condition, groups);
    }
    return cacheSolve3[key];
}

HashSet<string> Solve3(string condition, List<short> groups)
{
    return SolutionCountAltStringsInternal(condition, groups).ToHashSet();
}



List<(string condition, List<short> groups)> RemoveCertaintiesCached(string condition, List<short> groups)
{
    if (!useCache)
    {
        return RemoveCertainties(condition, groups).ToList();
    }
    var key = Hash(condition, groups);
    if (!cacheReduce.ContainsKey(key))
    {
        var result = RemoveCertainties(condition, groups).ToList();
        cacheReduce.Add(key, result);
    }
    return cacheReduce[key];
}

IEnumerable<(string condition, List<short> groups)> RemoveCertainties(string condition, List<short> groups)
{
    if (!groups.Any())
    {
        yield return (condition, groups);
        yield break;
    }

    condition = condition.Trim('.');

    var minGroup = groups.First();
    for (int i = 1; i < minGroup; i++)
    {
        var uselessStart = new string('?', i) + ".";
        if (condition.StartsWith(uselessStart))
        {
            condition = ReplaceOnce(condition, uselessStart, "");
        }
    }

    if (groups.Count == 1 && condition.All(x => x == '#' || x == '?') && condition.Length == groups.Single())
    {
        yield return ("", new List<short>());
        yield break;
    }

    var cpy = condition.ToString();//.Replace("?", "#");
    var cpyGroup = groups.ToList();




    var firstGroupLength = cpy.TakeWhile(x => x == '#').Count();
    if (firstGroupLength == cpyGroup.First())
    {
        cpyGroup.RemoveAt(0);
        var startGroup = cpy.IndexOf('#');
        condition = condition[(startGroup + firstGroupLength + 1)..].Trim('.');
        foreach (var item in RemoveCertaintiesCached(condition, cpyGroup))
        {
            yield return (item.condition, item.groups);
        }
        yield break;

    }



    cpy = new string(cpy.Reverse().ToArray());
    var lastGroupLength = cpy.TakeWhile(x => x == '#').Count();
    if (lastGroupLength == cpyGroup.Last())
    {
        cpyGroup.RemoveAt(cpyGroup.Count - 1);
        var startGroup = cpy.IndexOf('#');
        condition = condition[..(condition.Length - startGroup - lastGroupLength - 1)].Trim('.');// also remove a leading space, to make sure numbers are not right next to each other
        foreach (var item in RemoveCertaintiesCached(condition, cpyGroup))
        {
            yield return (item.condition, item.groups);
        }
        yield break;
    }



    if (useCache)
    {

        //middle pure match
        var groupsWithCount = cpyGroup.GroupBy(x => x).ToList();
        cpy = condition/*.Replace("?", "#")*/.ToString();
        var stringGroupsWithCount = GetAbsoluteGroupsCached(cpy).GroupBy(x => x).ToList();
        var match = groupsWithCount.FirstOrDefault(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count()));
        if (match != default)
        {
            var index = cpy.IndexOf($".{new string('#', match.Key)}.");
            var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
            var leftCondition = condition[..(index + 1)];

            var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
            var rightCondition = condition[(match.Key + index + 1)..];

            foreach (var item in RemoveCertaintiesCached(rightCondition, right))
            {
                yield return (item.condition, item.groups);
            }
            foreach (var item in RemoveCertaintiesCached(leftCondition, left))
            {
                yield return (item.condition, item.groups);
            }
            yield break;
        }

        if (condition.Contains('.'))
        {

            // partial start search
            var partialStart = new string(condition.TakeWhile(x => x != '.').ToArray());
            var firstGroup = cpyGroup.First();
            if (partialStart.Contains('#') && Solve3Cached(partialStart, cpyGroup.Take(1).ToList()).Count == 1 && Solve3Cached(partialStart, cpyGroup.Take(2).ToList()).Count == 0)
            {
                if (partialStart == condition)
                {
                    yield break;
                }
                cpyGroup.RemoveAt(0);

                var matchesX = Solve3Cached(partialStart, new List<short>() { firstGroup });
                var index = matchesX.Single().LastIndexOf('#');
                var conditionCpy = condition[(index + 2)..];
                foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
                {
                    yield return (item.condition, item.groups);
                }
                yield break;
            }

            // partial start end
            var partialEnd = new string(condition.Reverse().TakeWhile(x => x != '.').ToArray().Reverse().ToArray());
            var lastGroup = cpyGroup.Last();
            if (partialEnd.Contains('#') && Solve3Cached(partialEnd, cpyGroup.TakeLast(1).ToList()).Count == 1 && Solve3Cached(partialEnd, cpyGroup.TakeLast(2).ToList()).Count == 0)
            {
                if (partialEnd == condition)
                {
                    yield break;
                }
                cpyGroup.RemoveAt(cpyGroup.Count - 1);

                var matchesX = Solve3Cached(partialEnd, new List<short>() { lastGroup });
                var index = matchesX.Single().IndexOf('#');
                var conditionCpy = condition[..(condition.Length - matchesX.Single().Length + index - 1)];
                foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
                {
                    yield return (item.condition, item.groups);
                }
                yield break;

                //cpyGroup.RemoveAt(cpyGroup.Count - 1);
                //condition = condition[..(condition.Length - partialEnd.Length - 1)]; // also remove a trailing space, to make sure numbers are not right next to each other
                //foreach (var item in RemoveCertaintiesCached(condition, cpyGroup))
                //{
                //    yield return (item.condition, item.groups);
                //}
                //yield break;
            }
        }
        else if (condition.Contains('#'))
        {

            // partial start search
            var firstGroup = cpyGroup.First();
            var partialStart = condition.Substring(0, firstGroup + 1);
            if (partialStart.Contains('#') && Solve3Cached(partialStart, cpyGroup.Take(1).ToList()).Count == 1 && Solve3Cached(partialStart + "?", cpyGroup.Take(1).ToList()).Count == 1)
            {
                if (partialStart == condition)
                {
                    yield break;
                }
                cpyGroup.RemoveAt(0);

                var matchesX = Solve3Cached(partialStart, new List<short>() { firstGroup });
                var index = matchesX.Single().LastIndexOf('#');
                var conditionCpy = condition[(index + 2)..];
                foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
                {
                    yield return (item.condition, item.groups);
                }
                yield break;
            }

            if (partialStart.StartsWith('#'))
            {
                cpyGroup.RemoveAt(0);
                var conditionCpy = condition[Math.Min(condition.Length, (firstGroup + 1))..];
                foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
                {
                    yield return (item.condition, item.groups);
                }
                yield break;
            }


            // partial End search
            var partialEnd = new string(condition.Reverse().TakeWhile(x => x != '?').ToArray().Reverse().ToArray());
            var lastGroup = cpyGroup.Last();
            //if (partialEnd.Contains('#') && Solve3Cached(partialEnd, cpyGroup.TakeLast(1).ToList()).Count == 1 && Solve3Cached(partialEnd, cpyGroup.TakeLast(2).ToList()).Count == 0)
            //{
            //    if (partialEnd == condition)
            //    {
            //        yield break;
            //    }
            //    cpyGroup.RemoveAt(cpyGroup.Count - 1);

            //    var matchesX = Solve3Cached(partialEnd, new List<short>() { lastGroup });
            //    var index = matchesX.Single().LastIndexOf('#');
            //    var conditionCpy = condition[..(condition.Length - lastGroup - 1)];
            //    foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
            //    {
            //        yield return (item.condition, item.groups);
            //    }
            //    yield break;
            //}

            if (partialEnd.EndsWith('#'))
            {
                cpyGroup.RemoveAt(cpyGroup.Count - 1);
                var conditionCpy = condition[..(condition.Length - lastGroup - 1)];
                foreach (var item in RemoveCertaintiesCached(conditionCpy, cpyGroup))
                {
                    yield return (item.condition, item.groups);
                }
                yield break;
            }
        }

        // WRONG because order of groups doesnt respect the pattern group order
        //////middle derived match
        //cpy = ExtendGroups(condition);
        //stringGroupsWithCount = GetAbsoluteGroupsCached(cpy).GroupBy(x => x).ToList();
        //match = groupsWithCount.OrderByDescending(x => x.Count()).FirstOrDefault(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count()));
        //var needle = new string('#', match?.Key ?? 0);
        //if (match != default && cpy.Split(needle).Count() == 2)
        //{
        //    var finalNeedle = $".{needle}.";
        //    var index = cpy.IndexOf(finalNeedle);
        //    if (index == -1)
        //    {
        //        var last = new string(cpy.TakeLast(match.Key + 1).ToArray());
        //        finalNeedle = $".{needle}";
        //        if (finalNeedle == last)
        //        {
        //            index = cpy.Length - match.Key - 1;
        //        }
        //    }
        //    if (index == -1)
        //    {
        //        var start = new string(cpy.Take(match.Key + 1).ToArray());
        //        finalNeedle = $"{needle}.";
        //        if (finalNeedle == start)
        //        {
        //            index = 0;
        //        }
        //    }
        //    if (index == -1)
        //    {
        //        if (cpy == needle)
        //        {
        //            yield break;
        //        }
        //        else
        //        {
        //            Debugger.Break();
        //        }
        //    }

        //    var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
        //    var leftCondition = condition[..(index)];

        //    var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
        //    var rightCondition = condition[(match.Key + index + 1)..];

        //    foreach (var item in RemoveCertaintiesCached(rightCondition, right))
        //    {
        //        yield return (item.condition, item.groups);
        //    }
        //    foreach (var item in RemoveCertaintiesCached(leftCondition, left))
        //    {
        //        yield return (item.condition, item.groups);
        //    }
        //    yield break;
        //}



        //middle largest possible match
        cpy = condition.Replace("?", "#").ToString();
        stringGroupsWithCount = GetAbsoluteGroupsCached(cpy).GroupBy(x => x).ToList();
        if (!stringGroupsWithCount.Any())
        {
            yield return (condition, cpyGroup);
            yield break;
        }
        var max = stringGroupsWithCount.Max(x => x.Key);
        var matches = groupsWithCount.Where(x => x.Key == max).Where(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count()));

        // ALSO HERE WRONG because order of groups doesnt respect the pattern group order. So only if 1 match

        if (matches.Any() && matches.First().Count() == 1 && stringGroupsWithCount.Count(x => x.Key == max) == matches.Count())
        {
            match = matches.First();
            var aaa = new string('#', match.Key);
            var needles = new[] { $".{aaa}.", $"{aaa}.", $".{aaa}", $"{aaa}" };

            var found = "xxxxx";
            foreach (var needle2 in needles)
            {
                if (cpy.Contains(needle2))
                {
                    found = needle2;
                    break;
                }
            }

            var index = cpy.IndexOf(found);
            found = condition.Substring(index, found.Length);
            //if (found.Count(x => x == '.') == 2)
            //{
            //    found = found.Substring(1);
            //}
            //else if (found.StartsWith('.'))
            //{
            //    found = found.Substring(1);
            //}
            //else if (found.EndsWith('.'))
            //{
            //    found = found.Substring(0, found.Length - 1);
            //}

            var split = condition.Split(found, 2);

            var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
            var leftCondition = split[0];

            var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
            var rightCondition = split[1];

            foreach (var item in RemoveCertaintiesCached(rightCondition, right))
            {
                yield return (item.condition, item.groups);
            }
            foreach (var item in RemoveCertaintiesCached(leftCondition, left))
            {
                yield return (item.condition, item.groups);
            }
            yield break;
        }

        //middle largest possible match to solve sth like
        // ?###??????????###??????????###??????????###??????????###???????? 3,2,1,3,2,1,3,2,1,3,2,1,3,2,1
        cpy = condition.Replace("?", ".").ToString();
        stringGroupsWithCount = GetAbsoluteGroupsCached(cpy).GroupBy(x => x).ToList();
        if (!stringGroupsWithCount.Any())
        {
            yield return (condition, cpyGroup);
            yield break;
        }
        max = stringGroupsWithCount.Max(x => x.Key);
        matches = groupsWithCount.Where(x => x.Key == max).Where(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count()));

        if (matches.Any() && stringGroupsWithCount.Count(x => x.Key == max) == matches.Count() && !groups.Any(x => x > max))
        {
            match = matches.First();
            var aaa = new string('#', match.Key);
            var needles = new[] { $".{aaa}.", $"{aaa}.", $".{aaa}", $"{aaa}" };

            var found = "xxxxx";
            foreach (var needle2 in needles)
            {
                if (cpy.Contains(needle2))
                {
                    found = needle2;
                    break;
                }
            }

            var index = cpy.IndexOf(found);
            found = condition.Substring(index, found.Length);

            var split = condition.Split(found, 2);

            var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
            var leftCondition = split[0];

            var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
            var rightCondition = split[1];

            foreach (var item in RemoveCertaintiesCached(rightCondition, right))
            {
                yield return (item.condition, item.groups);
            }
            foreach (var item in RemoveCertaintiesCached(leftCondition, left))
            {
                yield return (item.condition, item.groups);
            }
            yield break;
        }




        ////middle derived match
        //cpy = ExtendGroups(condition);
        //stringGroupsWithCount = GetAbsoluteGroupsCached(cpy).GroupBy(x => x).ToList();
        //match = groupsWithCount.OrderByDescending(x => x.Count()).FirstOrDefault(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count()));
        //var needle = new string('#', match?.Key ?? 0);
        //if (match != default && cpy.Split(needle).Count() == 2)
        //{
        //    var finalNeedle = $".{needle}.";
        //    var index = cpy.IndexOf(finalNeedle);
        //    if (index == -1)
        //    {
        //        var last = new string(cpy.TakeLast(match.Key + 1).ToArray());
        //        finalNeedle = $".{needle}";
        //        if (finalNeedle == last)
        //        {
        //            index = cpy.Length - match.Key - 1;
        //        }
        //    }
        //    if (index == -1)
        //    {
        //        var start = new string(cpy.Take(match.Key + 1).ToArray());
        //        finalNeedle = $"{needle}.";
        //        if (finalNeedle == start)
        //        {
        //            index = 0;
        //        }
        //    }
        //    if (index == -1)
        //    {
        //        if (cpy == needle)
        //        {
        //            yield break;
        //        }
        //        else
        //        {
        //            Debugger.Break();
        //        }
        //    }

        //    var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
        //    var leftCondition = condition[..(index)];

        //    var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
        //    var rightCondition = condition[(match.Key + index + 1)..];

        //    foreach (var item in RemoveCertaintiesCached(rightCondition, right))
        //    {
        //        yield return (item.condition, item.groups);
        //    }
        //    foreach (var item in RemoveCertaintiesCached(leftCondition, left))
        //    {
        //        yield return (item.condition, item.groups);
        //    }
        //    yield break;
        //}
    }

    ////middle largest possible match
    //cpy = condition.ToString();
    //stringGroupsWithCount = GetGroupSurroundedByAnything(cpy).GroupBy(x => x).ToList();
    //if (!stringGroupsWithCount.Any())
    //{
    //    yield return (condition, cpyGroup);
    //    yield break;
    //}
    //var max = stringGroupsWithCount.Max(x => x.Key);
    //match = groupsWithCount.Where(x => x.Key == max).FirstOrDefault(x => stringGroupsWithCount.Any(y => y.Key == x.Key && y.Count() == x.Count())); ;
    //if (match != default)
    //{
    //    var aaa = new string('#', match.Key);
    //    var needles = new[] { $"?{aaa}?", $"?{aaa}", $"{aaa}?", $"{aaa}" };

    //    var found = "xxxxx";
    //    foreach (var needle in needles)
    //    {
    //        if (cpy.Contains(needle))
    //        {
    //            found = needle;
    //            break;
    //        }
    //    }

    //    var split = condition.Split(found, 2);

    //    var left = cpyGroup.TakeWhile(x => x != match.Key).ToList();
    //    var leftCondition = split[0];

    //    var right = cpyGroup.SkipWhile(x => x != match.Key).Skip(1).ToList();
    //    var rightCondition = split[1];

    //    foreach (var item in RemoveCertaintiesCached(rightCondition, right))
    //    {
    //        yield return (item.condition, item.groups);
    //    }
    //    foreach (var item in RemoveCertaintiesCached(leftCondition, left))
    //    {
    //        yield return (item.condition, item.groups);
    //    }
    //    yield break;
    //}


    yield return (condition, cpyGroup);
}

bool HasSingleSolution(string input, int length)
{
    return SolutionCount(input, length) == 1;
}

int SolutionCount(string input, int length)
{
    var mustIndices = input.Select((x, i) => (x, i)).Where(x => x.x == '#').Select(x => x.i).ToList();

    var count = 0;
    for (int i = 0; i <= input.Length - length; i++)
    {
        if (mustIndices.All(x => x >= i && x < i + length))
        {
            count++;
        }
    }

    return count;
}

int SolutionCountAlt(string input, List<short> nums)
{
    return Solve3Cached(input, nums).Count();
}

IEnumerable<string> SolutionCountAltStringsInternal(string input, List<short> nums)
{
    input = input.Replace("..", ".");

    if (printSolve) { Console.WriteLine(Hash(input, nums)); }

    var cpy = nums.ToList();
    cpy.Reverse();

    var bitboard = input.Select(x => x == '?' ? (bool?)null : x == '#').ToList();
    for (var i = (int)Math.Pow(2, input.Length) - 1; i > 0; i--)
    {
        if (i == 87)
        {

        }
        var ba = new bool[128];
        new BitArray(new[] { i }).CopyTo(ba, 0);
        ba = ba.Take(input.Length).Reverse().ToArray();
        if (FitsMask(ba, bitboard, new Stack<short>(cpy)))
        {
            var result = string.Join("", ba.Select(x => x ? '#' : '.'));
            if (printSolve)
            {
                Console.WriteLine(result);
            }
            yield return result;
        }
    }
}


bool FitsMask(bool[] ba, List<bool?> bitboard, Stack<short> stack)
{
    var encountered = 0;

    for (int i = 0; i < bitboard.Count; i++)
    {
        var bit = ba[i];
        var mask = bitboard[i];
        if (bit && mask.HasValue && !mask.Value)
        {
            return false;
        }
        if (mask.HasValue && mask.Value && !bit)
        {
            return false;
        }

        if (bit)
        {
            encountered++;
        }
        else
        {
            if (encountered > 0)
            {
                if (!stack.TryPop(out var num2))
                {
                    return false;
                }
                if (num2 != encountered) { return false; }
            }
            encountered = 0;
        }
    }

    if (encountered > 0)
    {
        if (!stack.TryPop(out var num2))
        {
            return false;
        }
        if (num2 != encountered) { return false; }
    }

    return stack.Count == 0;
}

string ExtendGroups(string input)
{
    while (input.Contains("#?")) { input = input.Replace("#?", "##"); }
    while (input.Contains("?#")) { input = input.Replace("?#", "##"); }
    return input;
}

List<short> GetAbsoluteGroupsCached(string input)
{
    if (!useCache)
    {
        return GetAbsoluteGroups(input);
    }
    if (!cacheGroupCounts.ContainsKey(input))
    {
        cacheGroupCounts[input] = GetAbsoluteGroups(input);
    }
    return cacheGroupCounts[input];
}

List<short> GetAbsoluteGroups(string input)
{
    return input.Split('.', StringSplitOptions.RemoveEmptyEntries).Where(x => !x.Contains('?')).Select(x => (short)x.Count()).ToList();
}

timer.Stop();
Console.WriteLine(result);
Console.WriteLine(result2);
Console.WriteLine(timer.ElapsedMilliseconds + "ms");
Console.ReadLine();

